{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["CardStyles","styled","div","_templateObject","Card","props","react_default","a","createElement","alt","src","concat","monster","id","name","email","CardListStyles","card_list_component_templateObject","CardList","monsters","map","card_component_Card","key","SearchBoxStyles","input","attrs","type","search_box_component_templateObject","SearchBox","_ref","placeholder","handleChange","onChange","GlobalStyle","createGlobalStyle","App_templateObject","AppWrapper","_templateObject2","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","e","setState","searchField","target","value","state","bind","assertThisInitialized","_this2","fetch","then","response","json","users","_this$state","filteredMonsters","filter","toLowerCase","includes","Fragment","search_box_component_SearchBox","card_list_component_CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4oBAGA,IAAMA,EAAaC,IAAOC,IAAVC,KAkBHC,EAAO,SAAAC,GAAK,OACvBC,EAAAC,EAAAC,cAACR,EAAD,KACEM,EAAAC,EAAAC,cAAA,OACEC,IAAI,UACJC,IAAG,wBAAAC,OAA0BN,EAAMO,QAAQC,GAAxC,6BAELP,EAAAC,EAAAC,cAAA,cAAMH,EAAMO,QAAQE,KAApB,KACAR,EAAAC,EAAAC,cAAA,aAAKH,EAAMO,QAAQG,MAAnB,mLCxBJ,IAAMC,EAAiBf,IAAOC,IAAVe,KAQPC,EAAW,SAAAb,GAAK,OAC3BC,EAAAC,EAAAC,cAACQ,EAAD,KACGX,EAAMc,SAASC,IAAI,SAAAR,GAAO,OACzBN,EAAAC,EAAAC,cAACa,EAAD,CAAMC,IAAKV,EAAQC,GAAID,QAASA,gOCZtC,IAAMW,EAAkBtB,IAAOuB,MAAMC,MAAM,SAAApB,GAAK,MAAK,CACnDqB,KAAM,WADgBzB,CAAH0B,KAYRC,EAAY,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,YAAaC,EAAhBF,EAAgBE,aAAhB,OACvBzB,EAAAC,EAAAC,cAACe,EAAD,CAAiBO,YAAaA,EAAaE,SAAUD,qzBCVvD,IAAME,EAAcC,YAAHC,KA2BXC,EAAanC,IAAOC,IAAVmC,KA8CDC,cAzCb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAgBFX,aAAe,SAAAe,GACbP,EAAKQ,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAftCX,EAAKY,MAAQ,CACXhC,SAAU,GACV6B,YAAa,IAGfT,EAAKR,aAAeQ,EAAKR,aAAaqB,KAAlBZ,OAAAa,EAAA,EAAAb,CAAAD,IARRA,mFAWM,IAAAe,EAAAZ,KAClBa,MAAM,8CACHC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAK,OAAIL,EAAKP,SAAS,CAAE5B,SAAUwC,uCAOpC,IAAAC,EAC2BlB,KAAKS,MAA/BhC,EADDyC,EACCzC,SAAU6B,EADXY,EACWZ,YACZa,EAAmB1C,EAAS2C,OAAO,SAAAlD,GAAO,OAC9CA,EAAQE,KAAKiD,cAAcC,SAAShB,EAAYe,iBAElD,OACEzD,EAAAC,EAAAC,cAAAF,EAAAC,EAAA0D,SAAA,KACE3D,EAAAC,EAAAC,cAACyB,EAAD,MACA3B,EAAAC,EAAAC,cAAC4B,EAAD,KACE9B,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAAC0D,EAAD,CACEpC,YAAY,kBACZC,aAAcW,KAAKX,eAErBzB,EAAAC,EAAAC,cAAC2D,EAAD,CAAUhD,SAAU0C,aApCZO,aCzBEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOrE,EAAAC,EAAAC,cAACoE,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,KAAK,SAAA0B,GACjCA,EAAaC","file":"static/js/main.f3c3d46d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst CardStyles = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: #95dada;\r\n  border: 1px solid grey;\r\n  border-radius: 5px;\r\n  padding: 25px;\r\n  cursor: pointer;\r\n  -moz-osx-font-smoothing: grayscale;\r\n  backface-visibility: hidden;\r\n  transform: translateZ(0);\r\n  transition: transform 0.25s ease-out;\r\n\r\n  &:hover {\r\n    transform: scale(1.01);\r\n  }\r\n`;\r\n\r\nexport const Card = props => (\r\n  <CardStyles>\r\n    <img\r\n      alt=\"monster\"\r\n      src={`https://robohash.org/${props.monster.id}?set=set2&?size=180x180`}\r\n    />\r\n    <h2> {props.monster.name} </h2>\r\n    <p> {props.monster.email} </p>\r\n  </CardStyles>\r\n);\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Card } from \"../card/card.component\";\r\n\r\nconst CardListStyles = styled.div`\r\n  width: 85vw;\r\n  margin: 0 auto;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: center;\r\n`;\r\n\r\nexport const CardList = props => (\r\n  <CardListStyles>\r\n    {props.monsters.map(monster => (\r\n      <Card key={monster.id} monster={monster} />\r\n    ))}\r\n  </CardListStyles>\r\n);\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst SearchBoxStyles = styled.input.attrs(props => ({\r\n  type: \"search\"\r\n}))`\r\n  -webkit-appearance: none;\r\n  border: none;\r\n  outline: none;\r\n  padding: 10px;\r\n  width: 150px;\r\n  line-height: 30px;\r\n  margin-bottom: 30px;\r\n`;\r\n\r\nexport const SearchBox = ({ placeholder, handleChange }) => (\r\n  <SearchBoxStyles placeholder={placeholder} onChange={handleChange} />\r\n);\r\n","import React, { Component } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { CardList } from \"./components/card-list/card-list.component\";\r\nimport { SearchBox } from \"./components/search-box/search-box.component\";\r\nimport { createGlobalStyle } from \"styled-components\";\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n    body {\r\n        margin: 0;\r\n        font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Oxygen\",\r\n        \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\",\r\n        sans-serif;\r\n        -webkit-font-smoothing: antialiased;\r\n        -moz-osx-font-smoothing: grayscale;\r\n        background: linear-gradient(\r\n        to left,\r\n        rgba(7, 27, 82, 1) 0%,\r\n        rgba(0, 128, 128, 1) 100%\r\n    );\r\n  }\r\n  \r\n  code {\r\n    font-family: source-code-pro, Menlo, Monaco, Consolas, \"Courier New\",\r\n      monospace;\r\n  }\r\n\r\n  h1 {\r\n    font-family: \"Bigelow Rules\";\r\n    font-size: 72px;\r\n    color: #0ccac4;\r\n  }\r\n`;\r\n\r\nconst AppWrapper = styled.div`\r\n  text-align: center;\r\n`;\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      monsters: [],\r\n      searchField: \"\"\r\n    };\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n      .then(response => response.json())\r\n      .then(users => this.setState({ monsters: users }));\r\n  }\r\n\r\n  handleChange = e => {\r\n    this.setState({ searchField: e.target.value });\r\n  };\r\n\r\n  render() {\r\n    const { monsters, searchField } = this.state;\r\n    const filteredMonsters = monsters.filter(monster =>\r\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\r\n    );\r\n    return (\r\n      <>\r\n        <GlobalStyle />\r\n        <AppWrapper>\r\n          <h1>Monsters Rolodex</h1>\r\n          <SearchBox\r\n            placeholder=\"search monsters\"\r\n            handleChange={this.handleChange}\r\n          />\r\n          <CardList monsters={filteredMonsters} />\r\n        </AppWrapper>\r\n      </>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}